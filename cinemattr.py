# -*- coding: utf-8 -*-
"""cinemattr.ipynb
Automatically generated by Colaboratory.
"""

!pip install chromadb langchain duckdb sentence-transformers lark openai pinecone-client
import os

from langchain.embeddings import HuggingFaceEmbeddings
model_name = "diptanuc/all-mpnet-base-v2"
model_kwargs = {"device": "cuda"}

hf = HuggingFaceEmbeddings(model_name=model_name, model_kwargs=model_kwargs)

import duckdb
from langchain.document_loaders import DuckDBLoader

loader = DuckDBLoader(
    """SELECT 
    m.title,
    m.description,
    COALESCE(str_split(m.stars,','),list_value('NA')) as stars,
    COALESCE(str_split(m.directors,','),list_value('NA')) as directors,
    m.year,
    COALESCE(m.certificate,'NA') as certificate,
    COALESCE(str_split(m.genre,','),list_value('NA')) as genre,
    COALESCE(m.runtime,'NA') as runtime,
    m.ratingCount,
    m.plot,
    m.summary,
    CAST(m.imdb_rating AS FLOAT) as imdb_rating, 
    m.imdb_title_id as source FROM imdb_wiki m""",
    database="/content/drive/MyDrive/Colab Notebooks/db.duckdb",
    page_content_columns=["summary", "plot"],
    metadata_columns=[
        "source",
        "title",
        "description",
        "stars",
        "directors",
        "year",
        "certificate",
        "genre",
        "runtime",
        "imdb_rating",
        "ratingCount",
    ],
)

data=loader.load()
from langchain.text_splitter import RecursiveCharacterTextSplitter
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
docs = text_splitter.split_documents(data)
print(docs[:4])

from langchain.vectorstores import Pinecone
import pinecone

pinecone.init(api_key=os.environ["PINECONE_API_KEY"], environment=os.environ["PINECONE_ENV"])
# pinecone.create_index("cinemattr", dimension=768)
vectorstore = Pinecone.from_documents(
    docs, hf,index_name="cinemattr"
)

# from langchain.vectorstores import Chroma
# vectorstore = Chroma.from_documents(
#     data, hf,persist_directory="/content/drive/MyDrive/Colab Notebooks/chromadb"
# )

from langchain.llms import OpenAI
from langchain.retrievers.self_query.base import SelfQueryRetriever
from langchain.chains.query_constructor.base import AttributeInfo

        
metadata_field_info=[
    AttributeInfo(
        name="title",
        description="The title of the movie", 
        type="string", 
    ),
    AttributeInfo(
        name="description",
        description="The description of the movie", 
        type="string", 
    ),
    AttributeInfo(
        name="genre",
        description="The genre(s) of the movie", 
        type="string or list[string]", 
    ),
    AttributeInfo(
        name="certificate",
        description="The certificate of the movie", 
        type="string", 
    ),
    AttributeInfo(
        name="year",
        description="The year the movie was released", 
        type="integer", 
    ),
    AttributeInfo(
        name="stars",
        description="The name of the movie actors", 
        type="string or list[string]", 
    ),
    AttributeInfo(
        name="director",
        description="The name of the movie directors", 
        type="string or list[string]", 
    ),
    AttributeInfo(
        name="runtime",
        description="The runtime of the movie", 
        type="string", 
    ),
    AttributeInfo(
        name="imdb_rating",
        description="A 1-10 rating for the movie on IMDB",
        type="float"
    ),
     AttributeInfo(
        name="ratingCount",
        description="How many people rated the movie on IMDB. Indicator of movie's popularity",
        type="integer"
    ),
]
document_content_description = "Summary and plot of the movie"
llm = OpenAI(temperature=0.2)
retriever = SelfQueryRetriever.from_llm(llm, vectorstore, document_content_description, metadata_field_info, verbose=True)

retriever.get_relevant_documents("Nic Cage")